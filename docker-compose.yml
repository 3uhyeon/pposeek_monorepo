version: '3.8'

services:
  #-------------------------------------------------------------------------
  # Nginx Reverse Proxy
  #-------------------------------------------------------------------------
  nginx:
    build: ./infra/nginx
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - next-frontend
      - spring-backend
    volumes:
      - ./logs/nginx:/var/log/nginx # 로그 디렉터리 마운트
    networks:
      - app-network

  #-------------------------------------------------------------------------
  # Spring Boot Backend (BFF)
  #-------------------------------------------------------------------------
  spring-backend:
    build: ./spring-backend
    container_name: spring-backend
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./logs/spring-boot:/var/log/app # 로그 디렉터리 마운트
    networks:
      - app-network
      - elk-network

  #-------------------------------------------------------------------------
  # Python AI Service (Consumer)
  #-------------------------------------------------------------------------
  ai-service:
    build: ./ai-service
    container_name: ai-service
    # Dockerfile에 CMD가 없거나 오버라이드 할 경우 사용
    command: python consumer.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./logs/ai-service:/var/log/app # 로그 디렉터리 마운트
    networks:
      - app-network
      - elk-network

  #-------------------------------------------------------------------------
  # Kafka Service
  #-------------------------------------------------------------------------
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092,CONTROLLER://:9093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qo'
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
    volumes:
      - ./logs/kafka:/var/log/kafka # 로그 디렉터리 마운트
    networks:
      - app-network

  #-------------------------------------------------------------------------
  # Next.js Frontend(WEB)
  #-------------------------------------------------------------------------
  next-frontend:
    build: ./next-frontend
    container_name: next-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./logs/nextjs:/var/log/app # 로그 디렉터리 마운트
    networks:
      - app-network

  

volumes:
  esdata:
    driver: local

networks:
  app-network:
    driver: bridge
  elk-network:
    driver: bridge