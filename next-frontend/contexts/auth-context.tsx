'use client';

import { createContext, useContext, useState, useEffect, type ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import * as authApi from '@/lib/api/auth';
import { User, LoginData, RegisterData, TokenInfo } from '@/lib/api/auth';
import { toast } from '@/components/ui/use-toast';

// Ïó≠Ìï†Î≥Ñ Í∂åÌïú Ï†ïÏùò
const PERMISSIONS: Record<string, string[]> = {
  USER: ["view_jobs", "apply_jobs", "chat_ai", "manage_profile"],
  COMPANY: ["view_jobs", "post_jobs", "view_applications", "manage_candidates", "manage_profile"],
  ADMIN: ["view_jobs", "post_jobs", "view_applications", "manage_candidates", "manage_users", "view_analytics"],
};

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (loginData: LoginData) => Promise<void>;
  register: (registerData: RegisterData) => Promise<void>;
  logout: () => void;
  hasPermission: (permission: string) => boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();



  // Ïó¨Í∏∞ÏÑú Î†åÎçîÎßÅ ÌôîÎ©¥ÏóêÏÑúÎèÑ Ìï¥Îãπ Ïò§Î•òÍ∞Ä Îú®Îäî Í≤ΩÏö∞Í∞Ä ÏûàÏñ¥ÏÑú ÏàòÏ†ïÌïÑÏöîÌï®. ******************************************** 8Ïõî1Ïùº.
  useEffect(() => {
    const validateTokenOnLoad = async () => {
      // üéØ Ïù¥Ï†ú ÌÜ†ÌÅ∞Ïù¥ ÏûàÎäîÏßÄ Ïó¨Î∂ÄÎßå ÌôïÏù∏Ìï©ÎãàÎã§. apiClientÍ∞Ä Ìó§ÎçîÏóê ÏûêÎèôÏúºÎ°ú Ï∂îÍ∞ÄÌï¥Ï§çÎãàÎã§.
      const token = localStorage.getItem('accessToken');
      if (token) {
        try {
          const userData = await authApi.getMe();
          setUser(userData);
          console.log("Token validated successfully, user data loaded.");
        } catch (error) {
          console.error('Token validation failed on load:', error);
          localStorage.removeItem('accessToken');
          setUser(null);
        }
      }
      setIsLoading(false);
    };
    validateTokenOnLoad();
  }, []);

  // Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ Ïãú Í≥µÌÜµ Ï≤òÎ¶¨ Ìï®Ïàò
  const handleAuthSuccess = (response: TokenInfo, successMessage: string) => {
    if (response && response.accessToken && response.userInfo) {
      // üéØ Ïó¨Í∏∞ÏÑú ÌÜ†ÌÅ∞ÏùÑ Ï†ÄÏû•ÌïòÎ©¥, apiClientÍ∞Ä Î™®Îì† Îã§Ïùå ÏöîÏ≤≠Î∂ÄÌÑ∞ ÏûêÎèôÏúºÎ°ú ÏÇ¨Ïö©Ìï©ÎãàÎã§.
      localStorage.setItem('accessToken', response.accessToken);
      console.log('response accesstoken:', response.accessToken); // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
      setUser(response.userInfo);
      toast({ title: successMessage, description: `${response.userInfo.displayName}Îãò, ÌôòÏòÅÌï©ÎãàÎã§.` });
      router.push('/dashboard');
      return true;
    }
    return false;
  };

  const login = async (loginData: LoginData) => {
    setIsLoading(true);
    try {
      const response = await authApi.login(loginData);
      if (!handleAuthSuccess(response, "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ")) {
        throw new Error('ÏÑúÎ≤ÑÎ°úÎ∂ÄÌÑ∞ Ïò¨Î∞îÎ•∏ ÏùëÎãµÏùÑ Î∞õÏßÄ Î™ªÌñàÏäµÎãàÎã§.');
      }
    } catch (error: any) {
      console.error('Login failed:', error);
      const errorMessage = error.response?.data || 'Î°úÍ∑∏Ïù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      toast({
        title: "Î°úÍ∑∏Ïù∏ Ïã§Ìå®",
        description: typeof errorMessage === 'string' ? errorMessage : 'ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (registerData: RegisterData) => {
    setIsLoading(true);
    try {
      const response = await authApi.register(registerData);
      console.log('Register response:', response); // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
      if (!handleAuthSuccess(response, "ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ")) {
        throw new Error('ÌöåÏõêÍ∞ÄÏûÖ ÏùëÎãµÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.');
      }
    } catch (error: any) {
      console.error('Registration failed:', error);
      const errorMessage = error.response?.data || 'ÌöåÏõêÍ∞ÄÏûÖ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      toast({
        title: "ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®",
        description: typeof errorMessage === 'string' ? errorMessage : 'Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ ÏïÑÏù¥Îîî ÎòêÎäî Ïù¥Î©îÏùºÏùº Ïàò ÏûàÏäµÎãàÎã§.',
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    // üéØ ÌÜ†ÌÅ∞ÏùÑ ÏÇ≠Ï†úÌïòÎ©¥, apiClientÎäî Îçî Ïù¥ÏÉÅ Ïù∏Ï¶ù Ìó§ÎçîÎ•º Î≥¥ÎÇ¥ÏßÄ ÏïäÏäµÎãàÎã§.
    localStorage.removeItem('accessToken');
    toast({ title: "Î°úÍ∑∏ÏïÑÏõÉ", description: "ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§." });
    router.push('/login');
  };

  const hasPermission = (permission: string): boolean => {
    if (!user || !user.role) return false;
    const userRole = user.role.toUpperCase() as keyof typeof PERMISSIONS;
    return PERMISSIONS[userRole]?.includes(permission) || false;
  };

  const value = {
    user,
    isAuthenticated: !!user,
    isLoading,
    login,
    register,
    logout,
    hasPermission,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}
