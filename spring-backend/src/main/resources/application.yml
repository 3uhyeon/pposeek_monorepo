#########################################################################
# 
# PPoseek Web Application - Spring Boot Configuration
# 
# Copyright(c) 2025 ROUNDERS. All rights reserved.
# This software is the proprietary information of ROUNDERS.
# 
#########################################################################

# ==============================================================================
# Spring Boot Core Configuration
# ==============================================================================
spring:
  application:
    name: pposeek-spring-backend                                    # 애플리케이션 이름
  
  # ------------------------------------------------------------------------------
  # 프로파일 설정 (단일 환경)
  # ------------------------------------------------------------------------------
  # profiles:
  #   active: dev   # 프로파일 분리 없이 단일 설정 사용
  
  # ------------------------------------------------------------------------------
  # 데이터소스 설정 (H2 In-Memory Database)
  # ------------------------------------------------------------------------------
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE  # H2 메모리 데이터베이스 URL (고정)
    driver-class-name: org.h2.Driver                   # H2 JDBC 드라이버
    username: sa                                       # 데이터베이스 사용자명
    password: password                                 # 데이터베이스 비밀번호
    hikari:
      jdbc-url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE  # HikariCP용 URL 고정
  # ==============================================================================
  # Kafka Configuration
  # ==============================================================================
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: pposeek_group
      auto-offset-reset: earliest
      # Consumer가 DTO를 직접 받도록 JSON Deserializer 설정
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        # 타입 매핑 추가 - Python에서 보낸 JSON을 직접 DTO로 변환
        spring.json.type.mapping: >
          analysis_feedback:com.rounders.pposeek.common.model.dto.kafka.AnalysisFeedback,
          notification:com.rounders.pposeek.common.model.dto.kafka.Notification
        # 타입 헤더 사용 안함 (Python에서 보내지 않으므로)
        spring.json.use.type.headers: false
        # 기본 타입으로 변환 허용
        spring.deserializer.value.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # Producer가 DTO를 직접 보내도록 JSON Serializer 설정
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    
  # ------------------------------------------------------------------------------
  # H2 Database Console 설정 (개발용)
  # ------------------------------------------------------------------------------
  h2:
    console:
      enabled: true                                    # H2 웹 콘솔 활성화
      path: /h2-console                                # H2 콘솔 접근 경로
      settings:
        web-allow-others: true                         # 외부 접근 허용 (개발환경만)
        # H2 콘솔에서 사용할 고정 URL 설정
        trace: false                                   # 트레이스 비활성화
        web-admin-password: ""                         # 관리자 패스워드 (빈 값으로 설정)
        
  # ------------------------------------------------------------------------------
  # SQL 초기화 설정
  # ------------------------------------------------------------------------------
  sql:
    init:
      mode: always                                     # SQL 스크립트 실행 모드 (always, embedded, never)
      schema-locations: classpath:schema.sql           # DDL 스크립트 위치
      continue-on-error: false                         # 에러 발생 시 중단 여부

# ==============================================================================
# MyBatis Configuration
# ==============================================================================
mybatis:
  # XML 매퍼 파일 위치
  mapper-locations: classpath:mappers/**/*.xml         # MyBatis XML 매퍼 경로 패턴
  
  # 타입 별칭 패키지 (DTO/Domain 클래스)
  type-aliases-package: com.rounders.pposeek.common.model
  
  # MyBatis 설정
  configuration:
    map-underscore-to-camel-case: true                # snake_case → camelCase 자동 변환
    default-fetch-size: 100                           # 기본 페치 크기
    default-statement-timeout: 30                     # SQL 실행 타임아웃 (초)
    lazy-loading-enabled: true                        # 지연 로딩 활성화
    multiple-result-sets-enabled: true                # 다중 결과셋 지원
    use-column-label: true                            # 컬럼 라벨 사용
    use-generated-keys: true                          # 자동 생성 키 사용
    auto-mapping-behavior: partial                    # 자동 매핑 동작 (none, partial, full)
    
# ==============================================================================
# Server Configuration
# ==============================================================================
server:
  port: 8080                                          # 서버 포트
  servlet:
    context-path: /                                   # 컨텍스트 경로
    encoding:
      charset: UTF-8                                  # 문자 인코딩
      enabled: true                                   # 인코딩 필터 활성화
      force: true                                     # 강제 인코딩 적용
  error:
    include-message: always                           # 에러 메시지 포함
    include-stacktrace: on_param                      # 스택 트레이스 포함 조건

# ==============================================================================
# Spring Doc (Swagger) Configuration
# ==============================================================================
springdoc:
  api-docs:
    path: /v3/api-docs                                # OpenAPI 3 문서 경로
    enabled: true                                     # API 문서 활성화
  swagger-ui:
    path: /swagger-ui.html                            # Swagger UI 경로
    enabled: true                                     # Swagger UI 활성화
    operations-sorter: method                         # 작업 정렬 방식
    tags-sorter: alpha                                # 태그 정렬 방식
    display-request-duration: true                    # 요청 시간 표시

# ==============================================================================
# Management & Actuator Configuration (배포 가능한 설정)
# ==============================================================================
management:
  endpoints:
                   
    web:
      exposure:
        include: prometheus,health,info      # 필수 모니터링 엔드포인트만 노출
      base-path: /actuator
  endpoint:
    health:
      enabled: true                                   # 헬스체크 활성화
      show-details: always                 # 인증된 사용자에게만 상세정보
    metrics:
      enabled: true                                   # 메트릭 수집 활성화
    prometheus:  
      enabled: true                                   # Prometheus 연동 준비
  metrics:
    export:
      prometheus:
        enabled: true                                 # Prometheus 메트릭 내보내기
  security:
    enabled: false  # 🔑 이게 핵심! Actuator 보안 비활성화

# ==============================================================================
# Logging Configuration (개발 + 배포 겸용)
# ==============================================================================
logging:
  level:
    # 루트 로그 레벨
    root: INFO
    
    # 패키지별 로그 레벨 (개발시 상세 로그)
    com.rounders.pposeek: DEBUG                       # 애플리케이션 로그 (상세)
    org.springframework.security: DEBUG              # Spring Security 로그 (상세)
    org.mybatis: DEBUG                               # MyBatis 로그 (상세)
    org.springframework.web: DEBUG                    # Spring Web 로그 (상세)
    org.springframework.web.servlet.DispatcherServlet: DEBUG  # 요청 매핑 로그
    
  # 로그 패턴 설정
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    
  # 로그 파일 설정 (배포시에도 유용)
  file:
    name: logs/pposeek.log                            # 로그 파일 경로
  logback:
    rollingpolicy:
      max-file-size: 10MB                             # 개별 파일 최대 크기
      max-history: 30                                 # 보관 일수
      total-size-cap: 100MB                           # 전체 최대 크기

# ==============================================================================
# Encryption & Security Configuration
# ==============================================================================
app:
  encryption:
    # 개인정보 암호화 키 (AES-256용)
    personal-key: ${PERSONAL_DATA_ENCRYPTION_KEY:pposeek-personal-data-encryption-key-for-aes256-must-be-32-chars-minimum}
    # 이력서 암호화 키 (AES-256용)  
    resume-key: ${RESUME_DATA_ENCRYPTION_KEY:pposeek-resume-data-encryption-key-for-aes256-must-be-32-chars-minimum}
    # 비밀번호 해시용 Salt 키 (SHA-512용)
    salt-key: ${PASSWORD_SALT_KEY:pposeek-password-salt-key-for-sha512-hashing-must-be-32-chars-minimum}
  frontend:
    url: ${FRONTEND_URL:http://localhost:3000}        # 프론트엔드 URL (CORS용)

# JWT 토큰 설정
jwt:
  secret: ${JWT_SECRET:pposeek-jwt-secret-key-for-token-signing-must-be-32-chars-minimum}
  expiration: ${JWT_EXPIRATION:86400}                 # 24시간 (초 단위)

# ==============================================================================
# Azure Blob Storage Configuration
# ==============================================================================
azure:
  blob:
    connection-string: ${AZURE_BLOB_CONN_STRING}
    container-name: ${AZURE_BLOB_CONTAINER}