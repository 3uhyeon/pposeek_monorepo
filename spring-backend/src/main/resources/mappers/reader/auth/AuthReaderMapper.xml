<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
/*****************************************************************
 * 
 * Copyright(c) 2024 ROUNDERS. All rights reserved.
 * This software is the proprietary information of ROUNDERS.
 * 
 *****************************************************************/
-->

<mapper namespace="com.rounders.pposeek.common.persistence.mapper.reader.auth.AuthReaderMapper">

    <!-- 로그인용 사용자 정보 조회 (이메일로) -->
    <select id="selectUserForLogin" parameterType="String" resultType="com.rounders.pposeek.common.model.dto.user.UserDto">
        /* AuthReaderMapper.selectUserForLogin - 로그인용 사용자 정보 조회 */
        SELECT 
            user_id as userId,
            email,
            password_hash as passwordHash,
            name,
            created_at as createdAt,
            last_login as lastLogin
        FROM `User` 
        WHERE email = #{loginId}
    </select>

    <!-- 이메일 중복 확인 -->
    <select id="checkEmailDuplicate" parameterType="String" resultType="int">
        /* AuthReaderMapper.checkEmailDuplicate - 이메일 중복 확인 */
        SELECT COUNT(*)
        FROM `User` 
        WHERE email = #{email}
    </select>

    <!-- 사용자명 중복 확인 (현재는 이메일과 동일) -->
    <select id="checkUsernameDuplicate" parameterType="String" resultType="int">
        /* AuthReaderMapper.checkUsernameDuplicate - 사용자명 중복 확인 (이메일 기준) */
        SELECT COUNT(*)
        FROM `User` 
        WHERE email = #{username}
    </select>

    <!-- 사용자 ID로 사용자 정보 조회 -->
    <select id="selectUserById" parameterType="Integer" resultType="com.rounders.pposeek.common.model.dto.user.UserDto">
        /* AuthReaderMapper.selectUserById - 사용자 ID로 정보 조회 */
        SELECT 
            user_id as userId,
            email,
            password_hash as passwordHash,
            name,
            role,
            created_at as createdAt,
            last_login as lastLogin
        FROM `User` 
        WHERE user_id = #{userId}
    </select>

    <select id="selectUserByEmail" parameterType="String" resultType="com.rounders.pposeek.common.model.dto.user.UserDto">
        /* AuthReaderMapper.selectUserByEmail - 이메일로 사용자 조회 */
        SELECT
            user_id AS userId,
            email,
            password_hash AS passwordHash,
            name,
            role,
            created_at AS createdAt,
            last_login AS lastLogin
        FROM
            `User`
        WHERE
            email = #{email}
    </select>

    <!-- ========== 세션 조회 ========== -->
    
    <!-- 세션 토큰으로 세션 조회 -->
    <select id="findSessionByToken" parameterType="String" resultType="com.rounders.pposeek.common.model.dto.auth.UserSessionDto">
        /* AuthReaderMapper.findSessionByToken - 세션 토큰으로 세션 조회 */
        SELECT 
            session_id as sessionId,
            user_id as userId,
            session_token as sessionToken,
            session_name as sessionName,
            created_at as createdAt,
            last_activity as lastActivity,
            is_active as isActive
        FROM `UserSessions`
        WHERE session_token = #{sessionToken} AND is_active = 1
    </select>

    <!-- 사용자의 활성 세션 목록 조회 -->
    <select id="findActiveSessionsByUserId" parameterType="Integer" resultType="com.rounders.pposeek.common.model.dto.auth.UserSessionDto">
        /* AuthReaderMapper.findActiveSessionsByUserId - 사용자의 활성 세션 목록 조회 */
        SELECT 
            session_id as sessionId,
            user_id as userId,
            session_token as sessionToken,
            session_name as sessionName,
            created_at as createdAt,
            last_activity as lastActivity,
            is_active as isActive
        FROM `UserSessions`
        WHERE user_id = #{userId} AND is_active = 1
        ORDER BY last_activity DESC
    </select>

    <!-- 세션 유효성 검증 -->
    <select id="validateSession" parameterType="String" resultType="Integer">
        /* AuthReaderMapper.validateSession - 세션 유효성 검증 */
        SELECT COUNT(*) 
        FROM `UserSessions`
        WHERE session_token = #{sessionToken} 
          AND is_active = 1 
          AND last_activity > DATE_SUB(NOW(), INTERVAL 24 HOUR)
    </select>

</mapper>
