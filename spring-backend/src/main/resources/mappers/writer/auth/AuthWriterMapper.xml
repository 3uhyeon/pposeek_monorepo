<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
/*****************************************************************
 * 
 * Copyright(c) 2024 ROUNDERS. All rights reserved.
 * This software is the proprietary information of ROUNDERS.
 * 
 *****************************************************************/
-->

<mapper namespace="com.rounders.pposeek.common.persistence.mapper.writer.auth.AuthWriterMapper">

    <!-- 사용자 등록 -->
    <insert id="insertUser" parameterType="com.rounders.pposeek.common.model.dto.user.UserDto" useGeneratedKeys="true" keyProperty="userId">
        /* AuthWriterMapper.insertUser - 사용자 등록 */
        INSERT INTO `User` (
            email,
            password_hash,
            name
        ) VALUES (
            #{email},
            #{passwordHash},
            #{name}
        )
    </insert>

    <!-- 사용자 정보 수정 -->
    <update id="updateUser" parameterType="com.rounders.pposeek.common.model.dto.user.UserDto">
        /* AuthWriterMapper.updateUser - 사용자 정보 수정 */
        UPDATE `User` 
        SET 
            email = #{email},
            name = #{name},
            last_login = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 마지막 로그인 시간 업데이트 -->
    <update id="updateLastLogin" parameterType="Integer">
        /* AuthWriterMapper.updateLastLogin - 마지막 로그인 시간 업데이트 */
        UPDATE `User` 
        SET 
            last_login = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- ========== 세션 관리 ========== -->
    
    <!-- 세션 생성 -->
    <insert id="createSession" parameterType="com.rounders.pposeek.common.model.dto.auth.UserSessionDto" useGeneratedKeys="true" keyProperty="sessionId">
        /* AuthWriterMapper.createSession - 세션 생성 */
        INSERT INTO `UserSessions` (
            user_id,
            session_token,
            session_name,
            is_active
        ) VALUES (
            #{userId},
            #{sessionToken},
            #{sessionName},
            #{isActive}
        )
    </insert>

    <!-- 세션 활동 시간 업데이트 -->
    <update id="updateSessionActivity" parameterType="String">
        /* AuthWriterMapper.updateSessionActivity - 세션 활동 시간 업데이트 */
        UPDATE `UserSessions` 
        SET 
            last_activity = NOW()
        WHERE session_token = #{sessionToken} AND is_active = 1
    </update>

    <!-- 세션 비활성화 (로그아웃) -->
    <update id="deactivateSession" parameterType="String">
        /* AuthWriterMapper.deactivateSession - 세션 비활성화 */
        UPDATE `UserSessions` 
        SET 
            is_active = 0 
        WHERE session_token = #{sessionToken}
    </update>

    <!-- 사용자의 모든 세션 비활성화 -->
    <update id="deactivateAllUserSessions" parameterType="Integer">
        /* AuthWriterMapper.deactivateAllUserSessions - 사용자의 모든 세션 비활성화 */
        UPDATE `UserSessions` 
        SET 
            is_active = 0 
        WHERE user_id = #{userId}
    </update>

    <!-- 만료된 세션 정리 (24시간 이상 비활성) -->
    <delete id="cleanupExpiredSessions">
        /* AuthWriterMapper.cleanupExpiredSessions - 만료된 세션 정리 */
        DELETE FROM `UserSessions` 
        WHERE last_activity &lt; DATE_SUB(NOW(), INTERVAL 24 HOUR)
    </delete>

</mapper>
